a * b = (10^{n/2} a_L + a_r)(10^{n/2}b_L + b_r)
= 10^n a_L b_L + 10^{n/2} a_L b_r + 10^{n/2} a_r b_L + a_r b_r
= 10^n a_L b_L + 10^{n/2}(a_L b_r + a_r b_L) + a_r b_r



2^m * c = c << m
tc = Theta(m)


algo 2 tc
T(n) := tc of mult() over integers with n digits
(1) 4T(n/2)		/* each multiplication is taken
between integers with n/2 digits */
(2) 
	
10^n * mult(a_L, b_L): Theta(n)
mult(a_L, b_r) + mult(a_r, b_L): Theta(n)
10^{n/2} (.. + ..) : Theta(n/2) = Theta(n)
+, +: Theta(n)


tc of (2) = Theta(n)

T(n) = 4T(n/2) + Theta(n)







algo 3
trick
(a_L + a_r)(b_L + b_r)
= a_L b_L + (a_L b_r + a_r b_L) + a_r b_r
->
a_L b_r + a_r b_L = (a_L + a_r)(b_L + b_r) - a_L b_L - a_r b_r

tc of algo 3
T(n) = 3T(n/2) + 2Theta(n)
=  3T(n/2) + Theta(n)


tc of any comparison based sorting algo
in the worst case is Omega(n lg n)

corollary
mergesort and quicksort (pivot > median)
are optimal comparison-based algo (asymptotically optimal)






non-comparison-based sorting algo's:

algo 1:
input: A[1...n], k
A[i] <= k for all i = 1, ..., n
output: sorted A
ex:
A = [6 8 8 2 1 2], k = max(A) = 8
auxiliary array
B[1...k]
each index i stores the frequency of number i in array A
B[i] = # i elements in A
output sorted A = [1, 2, 2, 6, 8, 8]
tc = Theta(n + k)
// n = time to traverse array A, k = time to traverse array B 


remark
a. if k = O(n), then tc = Theta(n + k) = Theta(n)
sc = Theta(n + k) = Theta(n)
b. algo 1 is unstable
c. algo 1 does not preserve associated values to
the keys


ex: key value pairs 
(key, data)
A = [(3, i), (2, a), (1, k), (3, a), (1, f)]

B = [2, 1, 2]

output = [1, 1, 2, 3, 3]






algo 2:
B: array of k lists, k = 3

B = [1...3]
= 
[
	(1, k), (1, f)
	(2, a)
	(3, i), (3, a)	
]

output sorted array
= [(1, k), (1, f), (2, a), (3, i), (3, a)]

1. algo 2 is stable
2. algo 2 preserves data associated to the keys





radix
sort base on 1st coordinate
then sort 2nd coordinate





algo 3
counting sort(A[1...n], k)
def B[1...k] = [0]
def C[1...n]
(1) for i = 1 to n		//B[j] = # appearances of j in A
	++B[A[i]]
(2) for j = 2 to k		//B[j] = # elements in A <= j
	B[j] += B[j - 1]
(3) for i = n to 1
	C[B[A[j]]] = A[j]
 	B[A[j]] --
output C[1...n] 


ex:
A = [6, 2, 3, 1, 2, 5, 3, 3]
k = max = 6
(1). B = [1, 2, 3, 0, 1, 1]
(2). B = [1, 3, 6, 6, 7, 8]	//cumulative
(3). C = [1, 2, 2, 3, 3, 3, 5, 6]
      B = [1, 3, 6, 6, 7, 8]
C is sorted A (stable)




